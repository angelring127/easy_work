---
description:
globs:
alwaysApply: true
---

# Technical Requirements Document (TRD)

## 1. Executive Technical Summary

- **Project Overview**: Workeasy는 Next.js 기반의 PWA를 사용하여 소규모 카페 및 음식점의 교대 근무표 자동 생성 및 관리, 실시간 팀 커뮤니케이션을 지원하는 SaaS 솔루션입니다. Supabase를 통해 데이터 저장 및 실시간 업데이트를 처리하며, 사용자 인터페이스는 shadcn 및 TailwindCSS를 활용하여 반응형으로 구현됩니다.
- **Core Technology Stack**: Next.js 15, TypeScript, TailwindCSS, shadcn, lucide-react, Supabase (PostgreSQL, Auth, Realtime), @tanstack/react-query, es-toolkit, date-fns를 핵심 기술 스택으로 사용합니다.
- **Key Technical Objectives**: 2초 이내 초기 로딩 속도, 99.9% 가용성, 1초 미만 메시지 지연 시간을 목표로 합니다. 스케줄 자동 생성 완료 건수 및 교대 요청 승인 평균 처리 시간을 주요 KPI로 설정합니다.
- **Critical Technical Assumptions**: 알바생의 가용 시간 데이터가 정확하게 입력될 것으로 가정하며, Supabase의 안정적인 작동을 전제로 합니다. PWA 환경이 대부분의 사용자에게 적합하며, 데스크톱 웹 환경도 충분히 지원할 수 있다고 가정합니다.

---

## 2. Tech Stack

| Category     | Technology / Library   | Reasoning (Why it's chosen for this project)                                                                                                        |
| ------------ | ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| 프레임워크   | Next.js 15             | 서버 사이드 렌더링(SSR) 및 정적 사이트 생성(SSG)을 지원하여 초기 로딩 속도 향상, SEO 최적화. API 라우팅 및 미들웨어 제공으로 백엔드 기능 통합 용이. |
| 언어         | TypeScript             | 정적 타입 지원으로 코드 안정성 및 유지보수성 향상. Next.js와 통합 용이.                                                                             |
| 스타일링     | TailwindCSS            | 유틸리티 우선 스타일링으로 빠른 UI 개발 및 일관성 유지. 반응형 디자인 지원.                                                                         |
| UI 컴포넌트  | shadcn                 | 재사용 가능한 UI 컴포넌트 제공으로 개발 속도 향상 및 디자인 시스템 일관성 유지.                                                                     |
| 아이콘       | lucide-react           | 일관성 있는 벡터 기반 아이콘 제공.                                                                                                                  |
| 데이터베이스 | Supabase (PostgreSQL)  | 안정적인 관계형 데이터베이스 제공.                                                                                                                  |
| 인증         | Supabase Auth          | 사용자 인증 및 권한 관리 기능 제공.                                                                                                                 |
| 실시간 통신  | Supabase Realtime      | 푸시 알림 및 채팅 기능 구현에 필요한 실시간 데이터 업데이트 지원.                                                                                   |
| 데이터 페칭  | @tanstack/react-query  | 서버 상태 관리 및 데이터 캐싱을 통해 성능 최적화.                                                                                                   |
| 유틸리티     | es-toolkit             | 다양한 유틸리티 함수 제공으로 개발 편의성 향상.                                                                                                     |
| 날짜 처리    | date-fns               | 날짜 및 시간 관련 기능 제공.                                                                                                                        |
| **다언어**   | **커스텀 i18n 시스템** | **Next.js App Router 완전 호환 커스텀 다국어 시스템, 플랫 구조 번역 데이터, 쿠키 기반 언어 설정.**                                                  |

---

## 3. System Architecture Design

### Top-Level building blocks

- **Frontend (Next.js PWA)**:

  - UI 컴포넌트: shadcn 기반의 재사용 가능한 UI 컴포넌트
  - 상태 관리: @tanstack/react-query를 이용한 서버 상태 관리
  - 페이지 라우팅: Next.js의 파일 기반 라우팅
  - **다언어 처리**: 커스텀 i18n 시스템 기반 플랫 구조 번역 데이터, 쿠키/URL 기반 언어 라우팅

- **Backend (Supabase)**:

  - 데이터베이스: PostgreSQL을 이용한 데이터 저장 및 관리
  - 인증: Supabase Auth를 이용한 사용자 인증 및 권한 관리
  - 실시간 통신: Supabase Realtime을 이용한 실시간 데이터 업데이트

- **API Layer (Next.js API Routes)**:

  - 인증 미들웨어: API 요청에 대한 인증 및 권한 검사
  - 데이터 처리 로직: 데이터베이스 쿼리 및 비즈니스 로직 처리

- **Push Notification Service (Supabase Realtime + PWA)**:

  - PWA: Service Worker를 이용한 오프라인 지원 및 푸시 알림 처리
  - Supabase Realtime: 데이터 변경 감지 및 푸시 알림 트리거

```mermaid
graph TD
    A[Frontend (Next.js PWA)] --> B[API Layer (Next.js API Routes)]
    B --> C[Backend (Supabase)]
    C --> D[Push Notification Service (Supabase Realtime + PWA)]
```

- **Frontend (Next.js PWA)**: 사용자와의 인터랙션을 담당하며, API Layer를 통해 데이터를 요청하고 응답을 받아 UI를 업데이트합니다.
- **API Layer (Next.js API Routes)**: Frontend의 요청을 받아 Backend에 전달하고, 인증 및 데이터 처리 로직을 수행합니다.
- **Backend (Supabase)**: 데이터 저장, 인증, 실시간 통신을 담당하며, API Layer의 요청에 따라 데이터를 제공하고 업데이트합니다.
- **Push Notification Service (Supabase Realtime + PWA)**: Supabase Realtime을 통해 데이터 변경을 감지하고, PWA를 통해 사용자에게 푸시 알림을 전송합니다.

### Code Organization & Convention

**Domain-Driven Organization Strategy**

- **Domain Separation**: 사용자 관리, 스케줄 관리, 채팅, **다언어(커스텀 i18n)** 등 도메인별로 코드를 분리합니다.
- **Layer-Based Architecture**: 프레젠테이션 레이어, 비즈니스 로직 레이어, 데이터 접근 레이어를 분리합니다.
- **Feature-Based Modules**: 각 기능별로 모듈을 구성하여 관련 코드들을 함께 관리합니다.
- **Shared Components**: 공통 유틸리티, 타입, 재사용 가능한 컴포넌트들을 별도 모듈에 저장합니다.

**Universal File & Folder Structure**

```
/
├── src/
│   ├── app/                    # Next.js App Router
│   │   ├── [locale]/          # 다국어 라우팅 ([locale] 동적 세그먼트)
│   │   │   ├── page.tsx       # 홈페이지
│   │   │   ├── login/page.tsx
│   │   │   ├── signup/page.tsx
│   │   │   ├── dashboard/page.tsx
│   │   │   └── auth/verify-email/page.tsx
│   │   ├── api/               # API Routes
│   │   │   ├── auth/          # 인증 관련 API
│   │   │   │   ├── signup/route.ts
│   │   │   │   ├── signin/route.ts
│   │   │   │   ├── logout/route.ts
│   │   │   │   └── callback/route.ts
│   │   │   └── test/          # 테스트용 API
│   │   ├── globals.css
│   │   ├── layout.tsx         # 루트 레이아웃
│   │   ├── providers.tsx      # 글로벌 프로바이더
│   │   └── page.tsx           # 루트 페이지 (리다이렉트)
│   ├── components/
│   │   └── ui/                # shadcn UI 컴포넌트
│   │       ├── button.tsx
│   │       ├── card.tsx
│   │       ├── language-switcher.tsx  # 언어 선택기
│   │       └── ...
│   ├── contexts/
│   │   └── auth-context.tsx   # 인증 컨텍스트
│   ├── features/              # 기능별 컴포넌트
│   │   └── auth/
│   │       └── components/
│   │           ├── signin-form.tsx
│   │           └── signup-form.tsx
│   ├── hooks/
│   │   └── use-toast.ts
│   ├── lib/
│   │   ├── i18n.ts           # 커스텀 i18n 시스템 (번역 데이터 + 함수)
│   │   ├── i18n-config.ts    # i18n 설정 (미들웨어용)
│   │   ├── supabase/         # Supabase 관련
│   │   │   ├── client.ts
│   │   │   ├── server.ts
│   │   │   ├── middleware.ts
│   │   │   └── auth.ts
│   │   └── utils.ts
│   └── middleware.ts         # Next.js 미들웨어 (언어 감지/리다이렉트)
├── public/
│   └── easynext.png
├── supabase/
│   └── migrations/           # Supabase 마이그레이션
├── tailwind.config.ts
├── tsconfig.json
└── package.json
```

### Data Flow & Communication Patterns

- **Client-Server Communication**: API 요청/응답 패턴 (RESTful API)
- **Database Interaction**: Supabase 클라이언트를 이용한 데이터베이스 쿼리 및 트랜잭션 관리
- **External Service Integration**: Supabase Auth, Realtime 서비스 연동
- **Real-time Communication**: Supabase Realtime을 이용한 실시간 데이터 업데이트 및 푸시 알림
- **Data Synchronization**: Supabase Realtime을 통한 데이터 변경 감지 및 클라이언트 데이터 동기화
- **i18n Loading**: 커스텀 i18n 시스템으로 플랫 구조 번역 데이터 직접 관리, 쿠키 기반 언어 설정 저장

---

## 4. Architecture-Level: i18n & RBAC

### 요구사항

1. **다언어(Localization)**

- 지원 언어: 한국어(ko), 영어(en), 일본어(ja) — 확장 가능
- 적용 범위: UI 텍스트, 시스템 알림, 이메일/푸시 템플릿
- 계정별 언어 설정 저장(사용자 프로필), 브라우저 언어 자동 감지 + 수동 전환 지원
- 날짜/숫자/통화/시간대 포맷 로캘 적용(date-fns locale)
- 번역 키 누락 시 안전한 폴백(fallback chain: 사용자가 설정한 언어 → 브라우저 언어 → en)

2. **권한/RBAC(매장 단위)**

- 역할: 마스터, 서브, 파트타이머
- 스코프: **매장(Store) 컨텍스트** 기반 접근 제어, 채팅은 Global/Store 채널 분리
- API/GUARD: 모든 API 라우트/페이지 접근 시 매장 컨텍스트와 역할 검증 필수

3. **보안**

- HTTPS/TLS, JWT + Supabase 세션, CSRF 방지(서버 액션 사용 시), CSP 설정
- Supabase Row Level Security(RLS)로 store_id 기반 데이터 접근 제어

4. **성능/관측**

- 초기 로드 ≤ 2s, TTFB ≤ 500ms, Realtime 지연 < 1s
- i18n 번들 per-locale 100KB 이하 목표(분할 로딩)
- 번역 키 누락/오류 로그 수집, 언어별 사용량 메트릭 노출

### 구현 세부사항

- **커스텀 i18n 시스템**:
  - `src/lib/i18n.ts`: 플랫 구조 번역 데이터 + 커스텀 `t()` 함수
  - `src/lib/i18n-config.ts`: 미들웨어용 설정 분리
  - Next.js App Router 완전 호환, 라이브러리 의존성 없음
- **언어 라우팅**: `[locale]` 동적 세그먼트로 URL 기반 언어 관리 (`/ko`, `/en`, `/ja`)
- **언어 결정 로직**: (1) URL locale > (2) 쿠키 저장값 > (3) Accept-Language 헤더 > (4) 기본값(ko)
- **언어 전환 UI**: `LanguageSwitcher` 컴포넌트로 실시간 언어 변경, 쿠키 저장 + URL 리다이렉트
- **미들웨어 처리**: `src/middleware.ts`에서 언어 감지 및 리다이렉트 로직
- **번역 데이터 구조**: 플랫 키-값 구조 (`"home.title": "번역값"`)로 간단하고 효율적 관리
- **타입 안전성**: TypeScript로 locale 타입 및 번역 함수 타입 안전성 보장
- **쿠키 관리**: `locale` 쿠키로 사용자 언어 설정 영구 저장 (1년)
- **SSR/CSR 호환**: 서버/클라이언트 양쪽에서 동일한 번역 결과 보장
- **RBAC 가드**: API 미들웨어에서 `user_store_roles` 조회 → store_id 스코프 확인 (향후 구현)
- **RLS 정책**: `store_id IN (사용자 권한 스토어)` 조건으로 SELECT/INSERT/UPDATE 제한 (향후 구현)
- **모니터링**: 번역 키 누락 시 키 자체를 반환하여 안전한 폴백, 개발 모드에서 디버깅 로그

### 테스트 전략

- **Unit**: 번역 키 존재성 테스트, 가드 유틸 테스트, 날짜 포맷 로캘 테스트
- **Integration**: 로그인→언어 설정 저장→SSR 렌더 텍스트 검증 / RBAC로 금지 리소스 접근 차단 확인
- **E2E**(Playwright):

  - (i18n) 언어 전환 유지(새 세션/새 탭) / 이메일/푸시 내용 언어별 검사
  - (RBAC) 마스터/서브/파트별 메뉴/버튼 노출 및 접근 제어 검증
  - (채팅) Global/Store 채널 참여 범위 및 멘션/공지 노출 확인

- **Load**: i18n 리소스 lazy-load 지연, Realtime 채널 1K 동접 시 지연 측정
- **Security**: RLS 우회 시도, JWT 변조, XSS/CSRF 자동 스캔(OWASP ZAP)
- **Pseudo-Localization**: 문자 확장/RTL 시뮬레이션으로 UI 깨짐 여부 점검(필요 시)

---

## 5. Performance & Optimization Strategy

- Next.js의 서버 사이드 렌더링(SSR) 및 정적 사이트 생성(SSG)을 활용하여 초기 로딩 속도 최적화
- @tanstack/react-query를 사용하여 서버 상태 관리 및 데이터 캐싱
- 이미지 최적화 및 코드 분할을 통해 번들 크기 최소화
- Supabase Realtime을 이용한 실시간 데이터 업데이트 최적화
- **커스텀 i18n 시스템의 경량화 및 효율적인 번역 데이터 관리**

---

## 6. Implementation Roadmap & Milestones

### Phase 1: Foundation (MVP Implementation)

- **Core Infrastructure**: Next.js, TypeScript, TailwindCSS, Supabase 설정 및 개발 환경 구축
- **커스텀 i18n 시스템 구축**: 플랫 구조 번역 데이터, URL/쿠키 기반 언어 관리, 완전한 TypeScript 지원
- **Essential Features**: 스케줄 자동 배정, 교대 일정 교환, 사내 채팅(Global/Store), 푸시 알림, 관리자 대시보드 기본 기능 구현
- **Basic Security**: 사용자 인증 및 권한 관리 기능 구현(RBAC, RLS 초안)
- **Development Setup**: CI/CD 파이프라인 구축, Sentry 적용
- **Timeline**: Week 1-6

### Phase 2: Feature Enhancement

- **Advanced Features**: 스케줄 자동 배정 알고리즘 개선, 교대 일정 교환 프로세스 최적화, 채팅 기능 확장, 관리자 대시보드 기능 추가
- **Performance Optimization**: 초기 로딩 속도 최적화, 데이터베이스 쿼리 최적화, 실시간 통신 최적화
- **Enhanced Security**: RLS 정책 정교화, CSP/Headers 강화, 취약점 스캔 정례화
- **Localization Expansion**: 이메일/푸시 템플릿 다국어화 완료, 언어별 성능 최적화
- **Monitoring Implementation**: 시스템 모니터링 및 로깅 시스템 구축
- **Timeline**: Week 7-9

---

## 7. 현재 구현 상태 (Implementation Status)

### ✅ 완료된 기능들

1. **인프라 및 기본 설정**

   - Next.js 15 + TypeScript + TailwindCSS 설정 완료
   - Supabase 연동 및 인증 시스템 구축
   - shadcn/ui 컴포넌트 시스템 구축

2. **인증 시스템**

   - 회원가입/로그인/로그아웃 기능 구현
   - 이메일 인증 플로우 구현
   - 세션 관리 및 인증 상태 컨텍스트
   - API 라우트 기반 인증 처리

3. **커스텀 다국어 시스템**

   - Next.js App Router 완전 호환 커스텀 i18n 시스템
   - 플랫 구조 번역 데이터 관리 (`src/lib/i18n.ts`)
   - URL 기반 다국어 라우팅 (`[locale]` 세그먼트)
   - 쿠키 기반 언어 설정 저장
   - 미들웨어 기반 언어 감지 및 리다이렉트
   - 실시간 언어 전환 UI (`LanguageSwitcher`)
   - 한국어/영어/일본어 완전 지원

4. **UI/UX 구성요소**
   - 반응형 홈페이지
   - 로그인/회원가입 폼
   - 대시보드 기본 레이아웃
   - 이메일 인증 안내 페이지
   - 언어 선택 컴포넌트

### 🔄 진행 예정 기능들

1. **스케줄 관리 시스템**

   - 자동 배정 알고리즘
   - 드래그 앤 드롭 수정 기능
   - 근무 유형 관리

2. **교대 요청 시스템**

   - 교대 요청 생성/수락/거절
   - 승인 프로세스 관리
   - 실시간 알림

3. **채팅 시스템**

   - 전체(Global) 채팅
   - 매장별(Store) 채팅
   - 실시간 메시징

4. **권한 관리 (RBAC)**

   - 마스터/서브/파트타이머 역할 구분
   - 매장별 권한 관리
   - Row Level Security (RLS) 구현

5. **PWA 기능**
   - 서비스 워커 구현
   - 푸시 알림
   - 오프라인 지원

### 📁 현재 파일 구조

```
src/
├── app/
│   ├── [locale]/              # ✅ 다국어 라우팅
│   │   ├── page.tsx          # ✅ 홈페이지
│   │   ├── login/page.tsx    # ✅ 로그인
│   │   ├── signup/page.tsx   # ✅ 회원가입
│   │   ├── dashboard/page.tsx # ✅ 대시보드
│   │   └── auth/verify-email/page.tsx # ✅ 이메일 인증
│   ├── api/auth/             # ✅ 인증 API
│   ├── layout.tsx            # ✅ 루트 레이아웃
│   └── providers.tsx         # ✅ 프로바이더
├── components/ui/            # ✅ UI 컴포넌트
├── contexts/auth-context.tsx # ✅ 인증 컨텍스트
├── features/auth/            # ✅ 인증 기능
├── lib/
│   ├── i18n.ts              # ✅ 커스텀 i18n 시스템
│   ├── i18n-config.ts       # ✅ i18n 설정
│   └── supabase/            # ✅ Supabase 설정
└── middleware.ts            # ✅ 언어 감지 미들웨어
```

---

## 8. Risk Assessment & Mitigation Strategies

### Technical Risk Analysis

- **Technology Risks**: Next.js, Supabase 등 기술 스택에 대한 숙련도 부족 및 예상치 못한 문제 발생 가능성

  - **Mitigation**: PoC 진행, 베스트 프랙티스 문서화, 릴리즈 전 통합 리허설

- **Performance Risks**: 초기 로딩 속도 및 실시간 통신 성능 저하 가능성

  - **Mitigation**: 코드/이미지 최적화, DB 인덱싱, react-query 캐시 튜닝, 커스텀 i18n 최적화

- **Security Risks**: 인증/RLS 구성 오류, XSS/CSRF 등 취약점 가능성

  - **Mitigation**: 보안 점검 자동화, 최소 권한 원칙, 비밀관리(.env) 정책

### Project Delivery Risks

- **Timeline Risks**: 개발 일정 지연 및 예상치 못한 문제 발생 가능성

  - **Contingency**: 기능 플래그/점진적 릴리즈, 우선순위 재조정

- **Resource Risks**: 개발 인력 부족 및 기술 숙련도 부족 가능성

  - **Contingency**: 외부 컨설팅/인력 투입, 문서화 강화

- **Quality Risks**: 코드 품질 저하 및 테스트 부족 가능성

  - **Contingency**: 코드 리뷰/테스트 커버리지 기준, E2E 게이팅

- **Deployment Risks**: 배포 환경 문제 및 배포 실패 가능성

  - **Contingency**: 블루-그린/롤백 전략, 헬스체크/알람
