# Workeasy – Architecture Document

## 구현 완료 기능

### ✅ 완료된 기능들

1. **인프라 및 기본 설정**

   - Next.js 15 + TypeScript + TailwindCSS 설정 완료
   - Supabase 연동 및 인증 시스템 구축
   - shadcn/ui 컴포넌트 시스템 구축

2. **인증 시스템**

   - 회원가입/로그인/로그아웃 기능 구현
   - 이메일 인증 플로우 구현
   - 세션 관리 및 인증 상태 컨텍스트
   - API 라우트 기반 인증 처리

3. **커스텀 다국어 시스템**

   - Next.js App Router 완전 호환 커스텀 i18n 시스템
   - 플랫 구조 번역 데이터 관리 (`src/lib/i18n.ts`)
   - URL 기반 다국어 라우팅 (`[locale]` 세그먼트)
   - 쿠키 기반 언어 설정 저장
   - 미들웨어 기반 언어 감지 및 리다이렉트
   - 실시간 언어 전환 UI (`LanguageSwitcher`)
   - 한국어/영어/일본어 완전 지원

4. **UI/UX 구성요소**

   - 반응형 홈페이지
   - 로그인/회원가입 폼
   - 대시보드 기본 레이아웃
   - 이메일 인증 안내 페이지
   - 언어 선택 컴포넌트

5. **매장별 직무 역할 시스템** (2024-12-05 구현 완료)

   - 매장별 직무 역할 카탈로그 관리 (CRUD)
   - 유저-매장 단위 직무 역할 설정 (복수 역할 지원)
   - 근무 항목별 역할 요구 설정 (복수 역할 + 최소 인원)
   - RLS 기반 권한 관리 (관리자만 수정, 모든 구성원 조회)
   - API 엔드포인트 완전 구현
   - 프론트엔드 관리 UI 구현
   - 다국어 지원 완료

6. **데이터베이스 보안 강화** (2024-12-06 구현 완료)
   - store_members 뷰 보안 취약점 해결
   - auth.users 데이터 직접 노출 제거
   - 뷰에서 auth.users JOIN 제거하여 Supabase 보안 경고 해결
   - API에서 supabase.auth.admin.listUsers()로 사용자 정보 별도 조회
   - 기존 API 엔드포인트 보안 강화 및 호환성 유지
   - TypeScript 타입 정의 업데이트

### 🔄 진행 예정 기능들

1. **스케줄 관리 시스템**

   - 자동 배정 알고리즘 (역할 요구 충족 검증 포함)
   - 드래그 앤 드롭 수정 기능
   - 근무 유형 관리

2. **교대 요청 시스템**

   - 교대 요청 생성/수락/거절
   - 승인 프로세스 관리
   - 실시간 알림

3. **채팅 시스템**

   - 전체(Global) 채팅
   - 매장별(Store) 채팅
   - 실시간 메시징

4. **권한 관리 (RBAC)**

   - 마스터/서브/파트타이머 역할 구분
   - 매장별 권한 관리
   - Row Level Security (RLS) 구현

5. **PWA 기능**
   - 서비스 워커 구현
   - 푸시 알림
   - 오프라인 지원

## 최근 구현 상세: 매장별 직무 역할 시스템

### 데이터베이스 스키마

```sql
-- 매장 직무 역할 카탈로그
CREATE TABLE store_job_roles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  store_id UUID NOT NULL REFERENCES stores(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  code TEXT,
  description TEXT,
  active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (store_id, name),
  UNIQUE NULLS NOT DISTINCT (store_id, code)
);

-- 유저에게 매장 단위로 직무 역할 부여(복수)
CREATE TABLE user_store_job_roles (
  store_id UUID NOT NULL REFERENCES stores(id) ON DELETE CASCADE,
  user_id UUID NOT NULL,
  job_role_id UUID NOT NULL REFERENCES store_job_roles(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (store_id, user_id, job_role_id)
);

-- 근무 항목이 요구하는 역할(복수)
CREATE TABLE work_item_required_roles (
  work_item_id UUID NOT NULL REFERENCES work_items(id) ON DELETE CASCADE,
  job_role_id UUID NOT NULL REFERENCES store_job_roles(id) ON DELETE CASCADE,
  min_count INT NOT NULL DEFAULT 1 CHECK (min_count >= 0),
  PRIMARY KEY (work_item_id, job_role_id)
);
```

### API 엔드포인트

- `GET/POST /api/store-job-roles` - 매장 직무 역할 CRUD
- `PATCH/DELETE /api/store-job-roles/[id]` - 개별 역할 수정/삭제
- `GET/POST/DELETE /api/user-store-job-roles` - 유저 역할 관리
- `GET/POST/DELETE /api/work-item-required-roles` - 근무 항목 역할 요구 관리

### 프론트엔드 컴포넌트

- `JobRolesManager` - 매장 설정에서 직무 역할 관리
- 다국어 지원 완료 (한국어/영어/일본어)
- 관리자 전용 편집 UI
- 실시간 유효성 검증

### 보안 및 권한

- RLS 정책으로 매장별 접근 제어
- 관리자(MASTER/SUB_MANAGER)만 쓰기 권한
- 모든 매장 구성원이 읽기 권한
- 사용 중인 역할 삭제 방지

### 다음 단계

1. ✅ 스케줄 생성 시 역할 요구 충족 검증 로직 구현
2. ✅ 유저 프로필에서 직무 역할 설정 UI 구현
3. ✅ 근무 항목 편집 시 역할 요구 설정 UI 구현
4. ✅ 스케줄 표에서 역할 커버리지 표시 기능 구현

### 최근 구현 완료: 스케줄 역할 검증 시스템

#### 역할 커버리지 계산 유틸리티

- `src/lib/schedule/role-coverage.ts`: 역할 커버리지 계산 및 검증 함수
- `validateScheduleRoleRequirements()`: 통합 검증 함수
- `calculateRoleCoverage()`: 역할별 현재/필요 인원 계산
- `formatRoleCoverageMessage()`: 사용자 친화적 메시지 생성

#### 스케줄 검증 API 확장

- 기존 `/api/schedule/validate` API에 역할 검증 로직 통합
- `workItemIds`와 `assignedUsers` 파라미터 추가
- 역할 미충족 시 상세 오류 정보 반환
- 다국어 오류 메시지 지원

#### 프론트엔드 컴포넌트

- `WorkItemRoleManager`: 통합된 역할 관리 및 표시 컴포넌트
  - 편집/표시 모드 전환
  - 권한 기반 UI 동적 변경
  - 역할 요구 사항 설정 및 커버리지 표시
- 실시간 검증 및 사용자 피드백
- 코드 중복 제거 및 유지보수성 향상

#### 다국어 지원

- 한국어/영어/일본어 완전 지원
- 역할 관련 모든 UI 텍스트 다국어화
- 오류 메시지 및 상태 표시 다국어화

## 현재 파일 구조

```
src/
├── app/
│   ├── [locale]/              # ✅ 다국어 라우팅
│   │   ├── page.tsx          # ✅ 홈페이지
│   │   ├── login/page.tsx    # ✅ 로그인
│   │   ├── signup/page.tsx   # ✅ 회원가입
│   │   ├── dashboard/page.tsx # ✅ 대시보드
│   │   └── auth/verify-email/page.tsx # ✅ 이메일 인증
│   ├── api/auth/             # ✅ 인증 API
│   ├── api/store-job-roles/  # ✅ 직무 역할 API
│   ├── api/user-store-job-roles/ # ✅ 유저 역할 API
│   ├── api/work-item-required-roles/ # ✅ 근무 항목 역할 요구 API
│   ├── layout.tsx            # ✅ 루트 레이아웃
│   └── providers.tsx         # ✅ 프로바이더
├── components/ui/            # ✅ UI 컴포넌트
├── contexts/auth-context.tsx # ✅ 인증 컨텍스트
├── features/auth/            # ✅ 인증 기능
├── features/stores/          # ✅ 매장 관리 기능
│   └── components/
│       └── job-roles-manager.tsx # ✅ 직무 역할 관리 컴포넌트
├── lib/
│   ├── i18n.ts              # ✅ 커스텀 i18n 시스템
│   ├── i18n-config.ts       # ✅ i18n 설정
│   ├── supabase/            # ✅ Supabase 설정
│   ├── validations/schedule/job-roles.ts # ✅ 직무 역할 검증 스키마
│   └── supabase/types.ts    # ✅ 타입 정의 (업데이트됨)
└── middleware.ts            # ✅ 언어 감지 미들웨어
```

## 기술 스택

- **프론트엔드**: Next.js 15, TypeScript, TailwindCSS, shadcn/ui
- **백엔드**: Supabase (PostgreSQL, Auth, RLS)
- **상태 관리**: @tanstack/react-query, zustand
- **검증**: Zod
- **다국어**: 커스텀 i18n 시스템
- **아이콘**: lucide-react
- **유틸리티**: date-fns, es-toolkit

## 개발 원칙

- **클린 코드**: DRY, KISS, SOLID 원칙 준수
- **타입 안전성**: TypeScript 완전 활용
- **보안**: RLS, 권한 검증, 입력 검증
- **사용자 경험**: 반응형 디자인, 접근성, 다국어 지원
- **성능**: 최적화된 쿼리, 캐싱, 코드 분할
